@using ToDoList.Business.Enums
@using ToDoList.ViewModels.ToDos
@model ToDosIndexViewModel

@{
    ViewData["Title"] = "ToDos";

    string? like = ViewContext.HttpContext.Request.Query["like"];
    string sortOrder = ViewContext.HttpContext.Request.Query["sortOrder"];
    if (string.IsNullOrEmpty(sortOrder))
        sortOrder = ToDosSortOrder.DeadlineAcs.ToString();
    string categoryIdString = ViewContext.HttpContext.Request.Query["categoryId"];
    int categoryId;
    if (!int.TryParse(categoryIdString, out categoryId))
        categoryId = 0;

    var categories = new List<CategoryModel> { new CategoryModel { Name = "-- Select category --" } };
    categories.AddRange(Model.Categories);
}

<h1>ToDos</h1>

<form asp-action="Create" class="mb-3 mt-2">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="row">
        <div class="form-group col-5">
            <label asp-for="CreateToDo.Name" class="control-label"></label>
            <input asp-for="CreateToDo.Name" class="form-control" />
            <span asp-validation-for="CreateToDo.Name" class="text-danger"></span>
        </div>
        <div class="form-group col-3">
            <label asp-for="CreateToDo.Deadline" class="control-label"></label>
            <input asp-for="CreateToDo.Deadline" class="form-control" />
            <span asp-validation-for="CreateToDo.Deadline" class="text-danger"></span>
        </div>
        <div class="form-group col-3">
            <label asp-for="CreateToDo.CategoryId" class="control-label"></label>
            <select asp-for="CreateToDo.CategoryId"
                    asp-items="@(new SelectList(categories, nameof(CategoryModel.Id), nameof(CategoryModel.Name)))"
                    class="form-control">
            </select>
            <span asp-validation-for="CreateToDo.CategoryId" class="text-danger"></span>
        </div>
        <div class="form-group col-1 d-flex align-items-end">
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </div>
</form>

<div class="mb-2 mt-2">
    <form method="get">
        <div class="row">
            <div class="col-5">
                <input id="like" name="like" class="form-control" placeholder="Search" value=@like>
            </div>
            <div class="col-3">
                <select name="sortOrder" id="sortOrder" class="form-control">
                    @foreach (var sortOrderName in Enum.GetNames(typeof(ToDosSortOrder)))
                    {
                        <option selected=@((bool)(sortOrder == sortOrderName)) value="@sortOrderName">@sortOrderName.SplitCamelCase()</option>
                    }
                </select>
            </div>
            <div class="col-3">
                <select name="categoryId" id="categoryId" class="form-control">
                    <option value=0>-- Select category --</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option selected=@((bool)(categoryId == category.Id)) value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>
            <div class="col-1">
                <button type="submit" class="btn btn-primary">Search</button>
            </div>
        </div>
    </form>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].IsComplete)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Deadline)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].DateComplete)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Category)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var toDo in Model.ToDos)
        {
            <tr @(toDo.IsComplete ? "class=toDoDone" : "") id="tr_@toDo.Id">
                <td>
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input switch" id="switch_@toDo.Id" @(toDo.IsComplete ? "checked" : "")>
                        <label class="custom-control-label" for="switch_@toDo.Id"></label>
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => toDo.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => toDo.Deadline)
                </td>
                <td class="dateComplete">
                    @Html.DisplayFor(modelItem => toDo.DateComplete)
                </td>
                <td>
                    <a class="nav-link" asp-area="" asp-controller="Categories" asp-action="Details" asp-route-id="@toDo.CategoryId">
                        @Html.DisplayFor(modelItem => toDo.Category.Name)
                    </a>
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@toDo.Id" class="btn btn-outline-primary">Details</a>
                    <a asp-action="Edit" asp-route-id="@toDo.Id" class="btn btn-dark">Edit</a>
                    <a asp-action="Delete" asp-route-id="@toDo.Id" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    $(".switch").change(function () {
       const id = this.id.replace("switch_", "");
       const isComplete = this.checked;
       let url = `/ToDos/SwitchIsComplete?id=${id}&isComplete=${isComplete}`;
       $.post(url, null, function (success) {
           $(`#tr_${id}`).toggleClass("toDoDone");
           const dateComplete = success.dateComplete && new Date(success.dateComplete)?.toLocaleString('uk').replace(',', '');
           $(`#tr_${id} .dateComplete`).text(dateComplete);
       });
    });
</script>
}