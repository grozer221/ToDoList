@using ToDoList.ViewModels.ToDos
@model ToDosCreateViewModel

@{
    ViewData["Title"] = "Create ToDo";
}

<h1>Create ToDo</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ToDo.Name" class="control-label"></label>
                <input asp-for="ToDo.Name" class="form-control" />
                <span asp-validation-for="ToDo.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ToDo.Deadline" class="control-label"></label>
                <input asp-for="ToDo.Deadline" class="form-control" />
                <span asp-validation-for="ToDo.Deadline" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ToDo.CategoryId" class="control-label"></label>
                <select 
                    asp-for="ToDo.CategoryId"
                    asp-items="@(new SelectList(Model.Categories, nameof(CategoryModel.Id), nameof(CategoryModel.Name)))"
                    class="form-control"
                >
                    </select>
                <span asp-validation-for="ToDo.CategoryId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index" class="btn btn-outline-primary">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
