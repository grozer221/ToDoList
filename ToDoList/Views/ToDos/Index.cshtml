@using ToDoList.Enums
@using ToDoList.ViewModels.ToDos
@model ToDosIndexViewModel

@{
    ViewData["Title"] = "ToDos";
    string? like = ViewContext.HttpContext.Request.Query["like"];
    string sortOrder = ViewContext.HttpContext.Request.Query["sortOrder"];
    if (string.IsNullOrEmpty(sortOrder))
        sortOrder = ToDosSortOrder.DeadlineAcs.ToString();
    string categoryIdString = ViewContext.HttpContext.Request.Query["categoryId"];
    int categoryId;
    if (!int.TryParse(categoryIdString, out categoryId))
        categoryId = 0;
}

<h1>ToDos</h1>


<div class="row mb-2">
    <div class="col-2">
        <a asp-action="Create" class="btn btn-info">Create</a>
    </div>
    <div class="col-10">
        <form method="get">
            <div class="row">
                <div class="col-3">
                    <select name="categoryId" id="categoryId" class="form-control" >
                        @foreach (var category in Model.Categories)
                        {
                            <option selected=@((bool)(categoryId == category.Id)) value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                <div class="col-3">
                    <select name="sortOrder" id="sortOrder" class="form-control">
                        @foreach (var sortOrderName in Enum.GetNames(typeof(ToDosSortOrder)))
                        {
                            <option selected=@((bool)(sortOrder == sortOrderName)) value="@sortOrderName">@sortOrderName.SplitCamelCase()</option>
                        }
                    </select>
                </div>
                <div class="col-5">
                    <input id="like" name="like" class="form-control" placeholder="Search" value=@like>
                </div>
                <div class="col-1">
                    <button type="submit" class="btn btn-primary">Search</button>
                </div>
            </div>
        </form>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].IsDone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Deadline)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToDos[0].CreatedAt)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var toDo in Model.ToDos)
        {
            <tr @(toDo.IsDone ? "class=toDoDone" : "") id="tr_@toDo.Id">
                <td>
                    <div class="custom-control custom-switch">
                        <input type="checkbox" class="custom-control-input switch" id="switch_@toDo.Id" @(toDo.IsDone ? "checked" : "")>
                        <label class="custom-control-label" for="switch_@toDo.Id"></label>
                    </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => toDo.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => toDo.Deadline)
                </td>
                <td>
                    <a class="nav-link" asp-area="" asp-controller="Categories" asp-action="Details" asp-route-id="@toDo.CategoryId">
                        @Html.DisplayFor(modelItem => toDo.Category.Name)
                    </a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => toDo.CreatedAt)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@toDo.Id" class="btn btn-dark">Edit</a>
                    <a asp-action="Delete" asp-route-id="@toDo.Id" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    $(".switch").change(function () {
       const id = this.id.replace("switch_", "");
       const isDone = this.checked;
       let url = `/ToDos/SwitchIsDone?id=${id}&isDone=${isDone}`;
       $.post(url, null, function () {
           $(`#tr_${id}`).toggleClass("toDoDone")
       });
    });

    //$(document).ready(function () {
    //    $('#like').val('@ViewContext.HttpContext.Request.Query["like"]');
    //    $('#sortOrder').val('@ViewContext.HttpContext.Request.Query["sortOrder"]' || '@ToDosSortOrder.DeadlineAcs');
    //    $('#categoryId').val('@ViewContext.HttpContext.Request.Query["categoryId"]' || 0);
    //});
</script>
}